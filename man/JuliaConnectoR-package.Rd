% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JuliaConnectoR-package.R
\docType{package}
\name{JuliaConnectoR-package}
\alias{JuliaConnectoR-package}
\title{A Functionally Oriented Interface for Integrating Julia with R}
\description{
This package provides a functionally oriented interface between R and Julia.
The goal is to call functions from Julia packages directly as R functions.
}
\details{
Julia functions imported via the \emph{JuliaConnectoR} can accept and return R variables.
The data structures passed to and returned from Julia are serialized,
sent via TCP and translated to Julia data structures.
Returned results are translated back to R.
Even complex Julia data structures are translated to R in a way that
they can be translated back and passed to Julia again.

It is also possible to pass function arguments to enable \emph{callbacks} from Julia to R.
R functions can be passed as arguments and will be invoked by
Julia in place of Julia functions.
}
\section{Setup}{

The package requires that
\href{https://julialang.org/downloads/}{Julia (Version \eqn{\geq}{>=} 0.7) is installed}
and that the Julia executable is in the system search \code{PATH} or that the
\code{JULIA_BINDIR} environment variable is set to the \code{bin} directory of
the Julia installation.
}

\section{Translation from Julia to R and vice versa}{

From a technical perspective, R data structures are serialized with an
optimized custom streaming format,
sent to a (local) Julia TCP server, and translated to Julia data structures by Julia.
The results of function calls are likewise translated back to R.

Since Julia is more type-sensitive than R,
it is important to know the translations of the data structures.

The translations from Julia to R are shown in the following table:

\tabular{ll}{
\strong{bla} \tab \strong{bla}\cr
\itemize{ \item blup \item z} \tab blup \cr}
}

